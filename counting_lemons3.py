# -*- coding: utf-8 -*-
"""Counting_lemons3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/gulbaharyildiz/Counting-Fruits-from-image/blob/master/Counting_lemons3.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
#importing required packages
import numpy as np
from cv2 import cv2
import matplotlib.pyplot as plt
# %matplotlib inline
import skimage.io as sk
import time
from time import sleep
import os
exec('from __future__ import print_function')
from skimage.feature import peak_local_max
from skimage.morphology import watershed  # using watershed algorithm for segmentation
from scipy import ndimage

def show(img):
  plt.imshow(img)
  plt.show()


#Loading the image
os.system('fswebcam -r 640x480 --no-banner image.jpg')
sleep(2)

img = cv2.imread('image.jpg')
  
#fp = "/home/pi/Desktop/Counting-Fruits-from-image/Lemons/lemon7.jpg"
#img = cv2.imread(fp)
plt.imshow(img)
print(img.shape)

#converting to HSV color model
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
show(hsv)

h, s, v = cv2.split(hsv)
show(s)

_, thr = cv2.threshold(s, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
show(thr)

#blurring the image
blur = cv2.medianBlur(thr, 5)
show(blur)

"""### finding contours"""

start = time.time()
copy1 = img.copy()
contours, hierarchy = cv2.findContours(blur,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(copy1, contours, -1, (0,0,255), 3)
show(copy1)
print("number of lemons found including error = ", len(contours))
end = time.time()
print ("Seconds taken for prediction: {}".format(end - start))